<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://yosaiproject.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 21 Nov 2016 15:03:12 -0500</lastBuildDate>
    <atom:link href="https://yosaiproject.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TOTP Tutorial</title>
      <link>https://yosaiproject.github.io/</link>
      <pubDate>Mon, 21 Nov 2016 15:03:12 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/</guid>
      <description>

&lt;h2 id=&#34;center-yosai-center&#34;&gt;&lt;center&gt;Yosai&lt;/center&gt;&lt;/h2&gt;

&lt;h3 id=&#34;center-two-factor-authentication-using-time-based-one-time-passwords-center&#34;&gt;&lt;center&gt;Two-Factor Authentication using Time-based One Time Passwords&lt;/center&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://yosaiproject.github.io/01.overview/</link>
      <pubDate>Sun, 20 Nov 2016 12:19:18 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;h3 id=&#34;two-factor-authentication-using-time-based-one-time-passwords&#34;&gt;Two-Factor Authentication using Time-based One Time Passwords&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://yosaiproject.github.io/content/images/totp.jpg&#34; alt=&#34;totp_logo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TOTP In a Nutshell</title>
      <link>https://yosaiproject.github.io/01.overview/01.totp_in_nutshell/</link>
      <pubDate>Sun, 20 Nov 2016 12:50:29 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/01.totp_in_nutshell/</guid>
      <description>&lt;p&gt;Step 1:  A user submits an N-digit TOTP token to the application&lt;/p&gt;

&lt;p&gt;Step 2: The application generates its own TOTP token and compares it with that
provided by the user.  If the tokens match, TOTP authentication is successful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passlib TOTP</title>
      <link>https://yosaiproject.github.io/01.overview/02.passlib_totp/</link>
      <pubDate>Sun, 20 Nov 2016 14:03:07 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/02.passlib_totp/</guid>
      <description>&lt;p&gt;Yosai uses Passlib&amp;rsquo;s totp module, available as of passlib v1.7.  Information about
this library are available from &lt;a href=&#34;https://pythonhosted.org/passlib/&#34;&gt;passlib documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Token Stores</title>
      <link>https://yosaiproject.github.io/01.overview/03.totp_sources/</link>
      <pubDate>Sun, 20 Nov 2016 16:05:08 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/03.totp_sources/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Secured USB Dongle: example &lt;a href=&#34;http://www.nitrokey.com&#34;&gt;NitroKey&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SMS Message:  See &lt;a href=&#34;https://github.com/YosaiProject/yosai_totp_sms&#34;&gt;Yosai&amp;rsquo;s SMS Messaging Extension&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=en&#34;&gt;Google Authenticator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TOTP Token</title>
      <link>https://yosaiproject.github.io/01.overview/04.totp_token/</link>
      <pubDate>Sun, 20 Nov 2016 14:04:10 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/04.totp_token/</guid>
      <description>&lt;p&gt;A TOTP token is a N-digit string, usually 6 digits in length, that can be used only
once for authentication and within a very short time window (+-30 seconds from now).
The TOTP token is generated from a private key &amp;ndash; a uniquely generated hash &amp;ndash; that
is shared between the user and application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/totp_token.png&#34; alt=&#34;totp_token&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>User-Specific Key</title>
      <link>https://yosaiproject.github.io/01.overview/05.user_key/</link>
      <pubDate>Sun, 20 Nov 2016 14:04:18 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/01.overview/05.user_key/</guid>
      <description>&lt;p&gt;Each user gets its own unique, private key.  This key is a 40+ character hash that
is shared between the user and application, except for sms-based totp authc.
The application keeps this key stored in a database in encrypted form.  The user
keeps this key stored in a protected, secure &amp;ldquo;space&amp;rdquo;.  This secure &amp;ldquo;space&amp;rdquo; typically
is a security-hardened USB dongle, such as a NitroKey, or a secure space on a mobile
phone accessible by an application such as GoogleAuthenticator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; totp.base32_key
&#39;HXTRYI7EPSX3LVQ2EPCFQSYJIHENTG5T&#39;

&amp;gt;&amp;gt;&amp;gt; totp.pretty_key()
&#39;HXTR-YI7E-PSX3-LVQ2-EPCF-QSYJ-IHEN-TG5T&#39;

&amp;gt;&amp;gt;&amp;gt; totp.hex_key
&#39;3de71c23e47cafb5d61a23c4584b0941c8d99bb3&#39;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TOTP Setup</title>
      <link>https://yosaiproject.github.io/02.user_setup/</link>
      <pubDate>Sun, 20 Nov 2016 15:26:06 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/</guid>
      <description>

&lt;h1 id=&#34;totp-user-setup&#34;&gt;TOTP User Setup&lt;/h1&gt;

&lt;p&gt;You will perform the following steps to enable a user for TOTP second-factor authentication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a TOTP Factory&lt;/li&gt;
&lt;li&gt;Use the TOTP Factory to generate a new TOTP instance&lt;/li&gt;
&lt;li&gt;Create an encrypted and json-serialized form of the TOTP instance&lt;/li&gt;
&lt;li&gt;Obtain the private totp key&lt;/li&gt;
&lt;li&gt;Share the private totp key with the user&lt;/li&gt;
&lt;li&gt;Persist the encrypted, serialize TOTP key to long term storage (database)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TOTP Factory</title>
      <link>https://yosaiproject.github.io/02.user_setup/01.create_totp_factory/</link>
      <pubDate>Mon, 21 Nov 2016 12:43:05 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/01.create_totp_factory/</guid>
      <description>&lt;p&gt;Create a TOTP factory by passing &lt;code&gt;create_totp_factory&lt;/code&gt; &lt;strong&gt;either&lt;/strong&gt; an &lt;em&gt;env_var&lt;/em&gt;
&lt;strong&gt;or&lt;/strong&gt; &lt;em&gt;file_path&lt;/em&gt; keyword argument, just as you do when instantiating a Yosai instance.&lt;/p&gt;

&lt;div class=&#34;notices warning&#34; &gt;&lt;p&gt;It is important that the application creating TOTP instances uses the same configuration as Yosai to verify tokens.&lt;/p&gt;
&lt;/div&gt;


&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from yosai.core import create_totp_factory

# you can pass EITHER an environment_variable OR filepath:
&amp;gt;&amp;gt;&amp;gt; TOTPFactory = create_totp_factory(env_var=&#39;YOSAI_SETTINGS&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Generate TOTP</title>
      <link>https://yosaiproject.github.io/02.user_setup/02.generate_totp_instance/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:58 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/02.generate_totp_instance/</guid>
      <description>&lt;p&gt;Generate a new TOTP instance for a user by calling TOTPFactory.new().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; totp = TOTPFactory.new()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Encrypt &amp; Serialize</title>
      <link>https://yosaiproject.github.io/02.user_setup/03.encrypt_serialize_totp/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:52 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/03.encrypt_serialize_totp/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; totp.to_json()
&#39;{&amp;quot;enckey&amp;quot;:{&amp;quot;c&amp;quot;:14,&amp;quot;k&amp;quot;:&amp;quot;FENAUW5P6VICNS6C2ODIMJT7QNJMN2RU&amp;quot;,&amp;quot;s&amp;quot;:&amp;quot;G5TMYOMHODXB2Q3IBWQQ&amp;quot;,&amp;quot;t&amp;quot;:&amp;quot;1479726717783&amp;quot;,&amp;quot;v&amp;quot;:1},&amp;quot;type&amp;quot;:&amp;quot;totp&amp;quot;,&amp;quot;v&amp;quot;:1}&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TOTP Key</title>
      <link>https://yosaiproject.github.io/02.user_setup/04.obtain_totp_key/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:42 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/04.obtain_totp_key/</guid>
      <description>&lt;p&gt;The TOTP instance can format the key in a few ways:  in base32, hex, or a
&amp;ldquo;pretty&amp;rdquo; base32.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; totp.base32_key
&#39;HXTRYI7EPSX3LVQ2EPCFQSYJIHENTG5T&#39;

&amp;gt;&amp;gt;&amp;gt; totp.hex_key
&#39;3de71c23e47cafb5d61a23c4584b0941c8d99bb3&#39;

&amp;gt;&amp;gt;&amp;gt; totp.pretty_key()
&#39;HXTR-YI7E-PSX3-LVQ2-EPCF-QSYJ-IHEN-TG5T&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Share Key</title>
      <link>https://yosaiproject.github.io/02.user_setup/05.share_key/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:35 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/05.share_key/</guid>
      <description>

&lt;p&gt;How or whether you share the private totp key with the user will depend on what
facilities you want to support for TOTP authentication.  If you decide to
use SMS-based TOTP authentication, you don&amp;rsquo;t ever share the private key with the user.&lt;/p&gt;

&lt;h3 id=&#34;1-secure-usb&#34;&gt;1. Secure USB&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;images/nitrokey-rendered.jpg&#34; alt=&#34;nitrokey_usb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If a user is using a USB dongle, such as a Nitrokey, the hardware is accompanied
with management software that saves the private totp key to USB memory.  A user will copy/paste
the key into the software&amp;rsquo;s interface and save the record to memory.
&lt;img src=&#34;images/enable_twostep_authc.png&#34; alt=&#34;base32_key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To facilitate this method of storage, share the key as a string, either in base32 or hex format.
&lt;img src=&#34;images/nitrokey_totp_registration.png&#34; alt=&#34;nitrokey_reg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-qr-code&#34;&gt;2. QR Code&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;images/enable_twostep_qrcode.png&#34; alt=&#34;qrcode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If a user is using a mobile application, such as Google Authenticator, the
application can read the private key as a QR code.  &lt;code&gt;passlib.totp&lt;/code&gt; facilitates
QR code generation.  Consult &lt;a href=&#34;https://passlib.readthedocs.io/en/latest/narr/totp-tutorial.html#rendering-uris&#34;&gt;its documentation&lt;/a&gt; to learn how.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save Key</title>
      <link>https://yosaiproject.github.io/02.user_setup/06.persist_key_to_db/</link>
      <pubDate>Mon, 21 Nov 2016 12:42:28 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/02.user_setup/06.persist_key_to_db/</guid>
      <description>

&lt;h3 id=&#34;persist-the-encrypted-serialized-totp-key-to-long-term-storage-database&#34;&gt;Persist the encrypted, serialized TOTP key to long term storage (database)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;images/secure_database.png&#34; alt=&#34;secure_db&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Step 1: UserPass Login</title>
      <link>https://yosaiproject.github.io/03.userpass_login/</link>
      <pubDate>Sun, 20 Nov 2016 15:16:01 -0500</pubDate>
      
      <guid>https://yosaiproject.github.io/03.userpass_login/</guid>
      <description>

&lt;h1 id=&#34;center-step-1-userpass-login-center&#34;&gt;&lt;center&gt; Step 1: UserPass Login &lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;Client is prompted with a standard login form to enter a username and password.
Client submits the requested information to the server, authenticating itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;img/login.png&#34; alt=&#34;username_password_login&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;server-first-authentication-request-usernamepasswordtoken&#34;&gt;Server First Authentication Request:  UsernamePasswordToken&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    with Yosai.context(yosai):
        new_subject = Yosai.get_current_subject()

        password_token = UsernamePasswordToken(username=&#39;thedude&#39;,
                                               credentials=&#39;letsgobowling&#39;)
        try:
            new_subject.login(password_token)
        except AdditionalAuthenticationRequired:
            # this is where your application responds to the second-factor
            # request from Yosai
            # this is pseudocode:
            request_totp_token_from_client()
        except IncorrectCredentialsException:
            # incorrect username/password provided
        except LockedAccountException:
            # too many failed username/password authentication attempts, account locked
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>