Developers use Sessions to store information about a user's interactions with 
an application over a specified period of time, for the duration of multiple 
requests.  


Session Initialization
----------------------
A Session can be used to manage state for a Subject regardless of whether the 
Subject has authenticated itself or remains anonymous.  Yosai initializes a 
server-side Session the moment that a Subject is instantiated: 

.. code-block:: python
    from yosai.core import SecurityUtils, UsernamePasswordToken

    # creates an "anonymous session" if the current executing subject hasn't 
    # logged in yet:
    guest = SecurityUtils.get_subject()

You can then manage state as necessary using the session, but more about that later:
.. code-block:: python
    session = guest.get_session()  # returns an anonymous session (guest)


The Relationship between Authentication, Authorization and Session Management
-----------------------------------------------------------------------------
The identity of an authenticated user is recorded in the session. Access is 
limited by user identity: a guest cannot perform the operations that an 
authenticated user can, and each authenticated user can perform different 
operations.  Since access control is limited to identity, and identity is obtained
from a session, access control is considered bounded to a session.

After a user authenticates itself, Yosai creates a new session for the user.
This is done for a few reasons.  The user's access to the system changes as
the user's identity changes (from anonymous to authenticated).  A new, 
"authenticated session" replaces the "anonymous session" the moment that a 
subject is authenticated as a user:

.. code-block:: python
    from yosai.core import SecurityUtils, UsernamePasswordToken

    # creates an "anonymous session" if the current executing subject hasn't 
    # logged in yet:
    current_user = SecurityUtils.get_subject()

    authc_token = UsernamePasswordToken(username='thedude', 
                                        credentials='letsgobowling')

    # creates an "authenticated session" if login in successful, raising
    # an exception otherwise (try/except left out to simplify the example):
    current_user.login(authc_token)

.. note::
    It is recommended that the session be regenerated by the application after 
    **any** privilege level change within the associated user session.


what it offers independently and in conjunction with authorization

- Yosai usage

The Session Token
-----------------
A Session Token is like a smart chip, or magnetic strip, on a credit card in
that it contains identification-- a session identifier (SessionID).  However,
unlike the elements of a credit card, the Session Token has a much shorter 
lifespan.

The SessionID is a sensitive and critical piece of information.  It uniquely
identifies a Session.  It is the Session's key in a SessionStore (cache) and 
it is the key that is sent with subsequent requests by a client (the user).  

Once an authenticated session is established, the SessionID is the client's
key in Yosai.  Therefore, it is very important that the session identifier be 
unique and very difficult to reproduce.  Yosai's default method to generate a 
SessionID is as follows:: 
    sha256(sha512(urandom(20)).digest()).hexdigest()



Session Storage
---------------

Session Validation
------------------

Session Events
--------------
Stop
Expire


Session Serialization
---------------------


Session Dataflow
----------------


References
----------
OWASP Session Management CheatSheet:  https://www.owasp.org/index.php/Session_Management_Cheat_Sheet

