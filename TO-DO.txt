"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
"""
accountstorerealm:
    - added get_credentials method so must migrate authenticate_account unit tests over
    - write unit tests for get_credentials

update DefaultSecurityManager set_realms and apply_cache_manager methods to 
use cache handlers rather than realms

update the SubjectStore to use a cache handler, so to be consistent with
how realms cache

Interfaces have been defined in the Shiro 2.0 alpha yet have no
corresponding concrete class implementation using them.  I presume this is 
due to their discretionary nature and that their implementation is subject
to change among the datastores used.  Requiring Concrete Implementations:
   - Account
   - AccountStore
   - AuthorizingAccountStoreRealm
   - AccountCacheResolver
   - AccountCacheKeyResolver
   - CacheManager

Porting annotations to python decorators

refactoring shiro thread-based concurrency to an appropriate concurrency 
solution in python
    - porting callables, runnables, etc (used in DelegatingSubject)

add eventbus functionality to the ModularRealmAuthorizor, and inject the 
eventbus from the DefaultSecurityManager into the MRA

write unit tests for remaining /session/session_untested classes, and migrate
the classes to session.py

port-refactor /config/IniSecurityManagerFactory

add versioning to Yosai

add packaging to Yosai

determine git workflow (rebase likely)

add the "fingerprint" attribute wherever the host attribute is currently captured

---------------------------------------------------------------------
add excessive-login-attempts logic:
    - login attempt time interval
    - maximum allowable login attempts within time interval
    - login-exhausted account lock time interval
    - maximum allowable login attemps until login-exhausted account lock

    Notes from Les:
    1) Store 3 additional columns in your User table:
    loginPeriodStartTimestamp, lastLoginAttemptTimestamp and
    loginAttemptCount. Based on what you configure the login period to be
    before accounts are locked (5 minutes?), you can increment the login
    attempt count. If that number ever becomes greater than what your
    system deems is allowed (3 tries?), then you would manually throw the
    ExcessiveAttemptsException. Then your login controller can react to
    that and show an appropriate GUI message.

    2) An even easier approach than #1, but which requires more disk
    storage, is to keep an event log of every login attempt. This is very
    simple - you enter an event into the event log for each login attempt
    with the timestamp the event occurred and the status of whether or not
    the login failed for that user. Then, determining if the account
    should be locked upon login is a very simple exercise - you query your
    event log to count all failed attempts for that user where the event
    timestamp is newer than (now - login period). If you receive any
    count greater than your configured number (say, 3), then you throw the
    exception.

---------------------------------------------------------------------

unit test JSON serialization

confirm correct porting of List<...> collections
